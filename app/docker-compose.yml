version: "3.2"

services:
  # perf-test:
  #   image: rsww/perf-test:${TAG:-latest}
  #   build:
  #     context: .
  #     dockerfile: locust-performance-tests/Dockerfile
  #   networks:
  #     - frontend
  #   depends_on:
  #     - frontend

  frontend:
    image: rsww/frontend:${TAG:-latest}
    build:
      context: .
      dockerfile: client/Dockerfile
    networks: 
      - frontend
    depends_on: 
      - apigateway
    ports:
      - 80:80
      - 443:443
      - 8080:8080

  apigateway:
    image: rsww/apigateway:${TAG:-latest}
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
      network: host
    networks:
      - frontend
      - backend
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASS}
    depends_on:
      - command-service
      - identity-service
      - query-service

  command-service:
    image: rsww/command-service:${TAG:-latest}
    build:
      context: .
      dockerfile: CommandService/Dockerfile
      network: host
    networks:
      - backend
    depends_on:
      - rabbitmq

  identity-service:
    image: rsww/indentity-service:${TAG:-latest}
    build:
      context: .
      dockerfile: IdentityService/Dockerfile
      network: host
    networks:
      - auth_db
      - backend
    depends_on:
      - postgres

  query-service:
    image: rsww/query-service:${TAG:-latest}
    build:
      context: .
      dockerfile: QueryService/Dockerfile
      network: host
    networks:
      - backend
    depends_on:
      - eventstore

  command-handler:
    image: rsww/command-handler:${TAG:-latest}
    build:
      context: .
      dockerfile: CommandHandler/Dockerfile
      network: host
    networks:
      - backend
    depends_on:
      - rabbitmq
      - eventstore

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
    networks:
      - backend
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  postgres:
    # image: rsww/postgres:${TAG:-latest}
    image: postgres:13-alpine
    # build:
    #   context: .
    #   dockerfile: db-scripts/Dockerfile
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
      - ./db-scripts:/docker-entrypoint-initdb.d
    networks:
      - auth_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s

  eventstore:
    image: eventstore/eventstore:21.2.0-buster-slim
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_EXT_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    networks:
      - backend
    volumes:
      - eventstore-volume-data:/var/lib/eventstore
      - eventstore-volume-logs:/var/log/eventstore

  jaeger:
    image: jaegertracing/all-in-one
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=19411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 19411:19411
    networks:
      - backend

volumes:
  local_postgres_data:
  eventstore-volume-data:
  eventstore-volume-logs:

networks:
  auth_db:
  backend:
  frontend:
    