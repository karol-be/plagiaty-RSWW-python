version: "3.9"

services:
  frontend:
    image: ghcr.io/therrlupardo/rsww_pr_3_frontend:${TAG:-stable}
    build:
      context: .
      dockerfile: client/Dockerfile
    networks: 
      - frontend
    depends_on: 
      - apigateway
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    healthcheck:
      disable: true
      
  apigateway:
    image: ghcr.io/therrlupardo/rsww_pr_3_apigateway:${TAG:-stable}
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    networks:
      - frontend
      - backend
      - monitoring
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=123456
    depends_on:
      - command-service
      - identity-service
      - query-service
    healthcheck:
      disable: true

  command-service:
    image: ghcr.io/therrlupardo/rsww_pr_3_command-service:${TAG:-stable}
    build:
      context: .
      dockerfile: CommandService/Dockerfile
    networks:
      - backend
      - monitoring
    depends_on:
      - rabbitmq
    healthcheck:
      disable: true

  identity-service:
    image: ghcr.io/therrlupardo/rsww_pr_3_indentity-service:${TAG:-stable}
    build:
      context: .
      dockerfile: IdentityService/Dockerfile
    networks:
      - auth_db
      - backend
      - monitoring
    depends_on:
      - postgres
    healthcheck:
      disable: true

  query-service:
    image: ghcr.io/therrlupardo/rsww_pr_3_query-service:${TAG:-stable}
    build:
      context: .
      dockerfile: QueryService/Dockerfile
    networks:
      - backend
      - monitoring
    depends_on:
      - eventstore
    healthcheck:
      disable: true

  command-handler:
    image: ghcr.io/therrlupardo/rsww_pr_3_command-handler:${TAG:-stable}
    build:
      context: .
      dockerfile: CommandHandler/Dockerfile
    networks:
      - backend
      - monitoring
    depends_on:
      - rabbitmq
      - eventstore
    healthcheck:
      disable: true

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
    networks:
      - backend
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    healthcheck:
      disable: true

  postgres:
    image: ghcr.io/therrlupardo/rsww_pr_3_postgres:${TAG:-stable}
    build:
      context: .
      dockerfile: db-scripts/Dockerfile
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - auth_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
    healthcheck:
      disable: true

  eventstore:
    image: eventstore/eventstore:21.2.0-buster-slim
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_EXT_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    networks:
      - backend
    healthcheck:
      disable: true

  jaeger:
    image: jaegertracing/all-in-one
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=19411
    ports:
      - 16686:16686
    networks:
      - monitoring
    healthcheck:
      disable: true

networks:
  auth_db:
  backend:
  frontend:
  monitoring:
    